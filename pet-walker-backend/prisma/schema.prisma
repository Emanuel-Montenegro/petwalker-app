generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                      Int              @id @default(autoincrement())
  nombre                  String
  email                   String           @unique
  contrasena              String
  rol                     Rol
  calificacionesRecibidas Calificacion[]
  certificados            Certificado[]
  facturasRecibidas       Factura[]        @relation("FacturaDueño")
  facturasEmitidas        Factura[]        @relation("FacturaPaseador")
  mascotas                Mascota[]
  notifications           Notification[]
  paseosAsignados         Paseo[]          @relation("UsuarioPaseos")
  verificacionDNI         VerificacionDNI?
}

model Mascota {
  id               Int      @id @default(autoincrement())
  nombre           String
  especie          String
  raza             String
  edad             Int
  sociable         Boolean
  usuarioId        Int
  alergias         String[]
  discapacidades   String[]
  estadoVacunacion String
  foto             String?
  necesitaBozal    Boolean  @default(false)
  observaciones    String
  usuario          Usuario  @relation(fields: [usuarioId], references: [id])
  paseos           Paseo[]
}

model Paseo {
  id              Int           @id @default(autoincrement())
  fecha           DateTime
  horaInicio      String        @default("00:00")
  duracion        Int           @default(30)
  estado          EstadoPaseo   @default(PENDIENTE)
  tipoServicio    String        @default("NORMAL")
  precio          Float         @default(0.0)
  mascotaId       Int
  paseadorId      Int?
  creadoEn        DateTime      @default(now())
  canceladoEn     DateTime?
  canceladoPorRol Rol?
  origenLatitud   Float?
  origenLongitud  Float?
  calificacion    Calificacion?
  factura         Factura?
  mascota         Mascota       @relation(fields: [mascotaId], references: [id])
  paseador        Usuario?      @relation("UsuarioPaseos", fields: [paseadorId], references: [id])
  puntosGPS       PuntoGPS[]
}

model Calificacion {
  id         Int      @id @default(autoincrement())
  paseoId    Int      @unique
  paseadorId Int
  puntuacion Int      @default(0)
  comentario String?
  creadoEn   DateTime @default(now())
  paseador   Usuario  @relation(fields: [paseadorId], references: [id])
  paseo      Paseo    @relation(fields: [paseoId], references: [id])
}

model Certificado {
  id          Int               @id @default(autoincrement())
  usuarioId   Int
  archivo     String
  descripcion String?
  estado      EstadoCertificado @default(PENDIENTE)
  creadoEn    DateTime          @default(now())
  usuario     Usuario           @relation(fields: [usuarioId], references: [id])
}

model Factura {
  id         Int      @id @default(autoincrement())
  paseoId    Int      @unique
  duenioId   Int
  paseadorId Int
  monto      Float
  fecha      DateTime @default(now())
  duenio     Usuario  @relation("FacturaDueño", fields: [duenioId], references: [id])
  paseador   Usuario  @relation("FacturaPaseador", fields: [paseadorId], references: [id])
  paseo      Paseo    @relation(fields: [paseoId], references: [id])
}

model PuntoGPS {
  id        Int      @id @default(autoincrement())
  paseoId   Int
  latitud   Float
  longitud  Float
  timestamp DateTime @default(now())
  precision Float?
  velocidad Float?
  altitud   Float?
  bateria   Int?
  paseo     Paseo    @relation(fields: [paseoId], references: [id])

  @@index([paseoId, timestamp])
  @@index([timestamp])
}

model VerificacionDNI {
  id              Int                   @id @default(autoincrement())
  usuarioId       Int                   @unique
  tipoDocumento   String?
  numeroDocumento String?
  urlFrente       String?
  urlDorso        String?
  estado          EstadoVerificacionDNI @default(PENDIENTE)
  creadoEn        DateTime              @default(now())
  actualizadoEn   DateTime              @updatedAt
  usuario         Usuario               @relation(fields: [usuarioId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  mensaje   String
  leida     Boolean  @default(false)
  tipo      String
  data      Json?
  creadaEn  DateTime @default(now())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
}

enum Rol {
  DUENO
  PASEADOR
  ADMIN
}

enum EstadoPaseo {
  PENDIENTE
  ACEPTADO
  EN_CURSO
  FINALIZADO
  CANCELADO
}

enum EstadoCertificado {
  PENDIENTE
  APROBADO
  RECHAZADO
}

enum EstadoVerificacionDNI {
  PENDIENTE
  APROBADO
  RECHAZADO
}
