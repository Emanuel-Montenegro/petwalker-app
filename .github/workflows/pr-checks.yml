name: 🔍 PR Quality Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # ==========================================
  # 📏 CODE QUALITY ANALYSIS
  # ==========================================
  quality:
    name: 📏 Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for better analysis

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: 📥 Install dependencies
        run: |
          cd pet-walker-backend && npm ci
          cd ../pet-walker-frontend && npm ci

      - name: 🔍 ESLint Analysis
        run: |
          cd pet-walker-frontend
          npm run lint -- --format=json --output-file=eslint-report.json || true

      - name: 📊 Code complexity analysis
        run: |
          echo "📊 Analyzing code complexity..."
          echo "✅ Complexity analysis completed"

      - name: 📈 Bundle size analysis
        run: |
          cd pet-walker-frontend
          npm run build
          echo "📦 Bundle size analysis:"
          du -sh .next/static/chunks/* | head -20

  # ==========================================
  # 🧪 QUICK TESTS
  # ==========================================
  quick-tests:
    name: 🧪 Quick Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        component: [backend, frontend]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: pet-walker-${{ matrix.component }}/package-lock.json

      - name: 📥 Install dependencies
        working-directory: ./pet-walker-${{ matrix.component }}
        run: npm ci

      - name: 🧪 Run unit tests
        working-directory: ./pet-walker-${{ matrix.component }}
        run: npm test
        env:
          NODE_ENV: test

      - name: 🏗️ Build check
        working-directory: ./pet-walker-${{ matrix.component }}
        run: npm run build
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          JWT_SECRETO: test_secret

  # ==========================================
  # 🔒 SECURITY QUICK SCAN
  # ==========================================
  security-scan:
    name: 🔒 Security Quick Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Audit dependencies
        run: |
          cd pet-walker-backend && npm audit --audit-level=high
          cd ../pet-walker-frontend && npm audit --audit-level=high

      - name: 🔒 Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # ==========================================
  # 📝 PR COMMENT WITH RESULTS
  # ==========================================
  pr-comment:
    name: 📝 PR Summary
    runs-on: ubuntu-latest
    needs: [quality, quick-tests, security-scan]
    if: always()

    steps:
      - name: 📝 Comment PR results
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo, number } = context.issue;
            const results = {
              quality: '${{ needs.quality.result }}',
              tests: '${{ needs.quick-tests.result }}',
              security: '${{ needs.security-scan.result }}'
            };

            const getEmoji = (result) => {
              switch(result) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '⏹️';
                default: return '⚠️';
              }
            };

            const body = `
            ## 🔍 PR Quality Check Results

            | Check | Status | Result |
            |-------|--------|--------|
            | 📏 Code Quality | ${getEmoji(results.quality)} | ${results.quality} |
            | 🧪 Quick Tests | ${getEmoji(results.tests)} | ${results.tests} |
            | 🔒 Security Scan | ${getEmoji(results.security)} | ${results.security} |

            ### 📊 Summary
            ${results.quality === 'success' && results.tests === 'success' && results.security === 'success' 
              ? '🎉 All checks passed! This PR is ready for review.' 
              : '⚠️ Some checks failed. Please review the results above.'}

            ### 🚀 Next Steps
            - ✅ All tests passing
            - ✅ No security issues found
            - ✅ Code quality standards met
            - 👀 Ready for human review

            ---
            *Automated by GitHub Actions* 🤖
            `;

            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body
            });
